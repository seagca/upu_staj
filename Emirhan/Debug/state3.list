
state3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e44  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002fe4  08002fe4  00003fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fec  08002fec  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fec  08002fec  00003fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ff0  08002ff0  00003ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002ff4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          000000cc  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085e7  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001697  00000000  00000000  0000c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0000dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054f  00000000  00000000  0000e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd53  00000000  00000000  0000e8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087e8  00000000  00000000  0002e652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c22dd  00000000  00000000  00036e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9117  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b74  00000000  00000000  000f915c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000facd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fb4 	.word	0x08002fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002fb4 	.word	0x08002fb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
	static void MX_USART3_UART_Init(void);
	uint16_t ModRTw_CRC(uint8_t *buf, int len);
	/* USER CODE END PFP */

	int main(void)
	{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 1 */
	  HAL_Init();
 80004fa:	f000 fc11 	bl	8000d20 <HAL_Init>
	  SystemClock_Config();
 80004fe:	f000 f9bb 	bl	8000878 <SystemClock_Config>
	  MX_GPIO_Init();
 8000502:	f000 fa21 	bl	8000948 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8000506:	f000 fa75 	bl	80009f4 <MX_USART2_UART_Init>
	  MX_USART3_UART_Init();
 800050a:	f000 fa9d 	bl	8000a48 <MX_USART3_UART_Init>

	  redData[0] = 0x01; redData[1] = 0x02; redData[2] = 0x03;
 800050e:	4b71      	ldr	r3, [pc, #452]	@ (80006d4 <main+0x1e0>)
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	4b6f      	ldr	r3, [pc, #444]	@ (80006d4 <main+0x1e0>)
 8000516:	2202      	movs	r2, #2
 8000518:	705a      	strb	r2, [r3, #1]
 800051a:	4b6e      	ldr	r3, [pc, #440]	@ (80006d4 <main+0x1e0>)
 800051c:	2203      	movs	r2, #3
 800051e:	709a      	strb	r2, [r3, #2]
	  redData[3] = 0x04; redData[4] = 0x05; redData[5] = 0x06;
 8000520:	4b6c      	ldr	r3, [pc, #432]	@ (80006d4 <main+0x1e0>)
 8000522:	2204      	movs	r2, #4
 8000524:	70da      	strb	r2, [r3, #3]
 8000526:	4b6b      	ldr	r3, [pc, #428]	@ (80006d4 <main+0x1e0>)
 8000528:	2205      	movs	r2, #5
 800052a:	711a      	strb	r2, [r3, #4]
 800052c:	4b69      	ldr	r3, [pc, #420]	@ (80006d4 <main+0x1e0>)
 800052e:	2206      	movs	r2, #6
 8000530:	715a      	strb	r2, [r3, #5]
	  uint16_t crc_red = ModRTw_CRC(redData, 6);
 8000532:	2106      	movs	r1, #6
 8000534:	4867      	ldr	r0, [pc, #412]	@ (80006d4 <main+0x1e0>)
 8000536:	f000 f8df 	bl	80006f8 <ModRTw_CRC>
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	  redData[6] = crc_red & 0xFF;
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b64      	ldr	r3, [pc, #400]	@ (80006d4 <main+0x1e0>)
 8000544:	719a      	strb	r2, [r3, #6]
	  redData[7] = (crc_red >> 8) & 0xFF;
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b61      	ldr	r3, [pc, #388]	@ (80006d4 <main+0x1e0>)
 8000550:	71da      	strb	r2, [r3, #7]

	  greenData[0] = 0x06; greenData[1] = 0x05; greenData[2] = 0x04;
 8000552:	4b61      	ldr	r3, [pc, #388]	@ (80006d8 <main+0x1e4>)
 8000554:	2206      	movs	r2, #6
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	4b5f      	ldr	r3, [pc, #380]	@ (80006d8 <main+0x1e4>)
 800055a:	2205      	movs	r2, #5
 800055c:	705a      	strb	r2, [r3, #1]
 800055e:	4b5e      	ldr	r3, [pc, #376]	@ (80006d8 <main+0x1e4>)
 8000560:	2204      	movs	r2, #4
 8000562:	709a      	strb	r2, [r3, #2]
	  greenData[3] = 0x03; greenData[4] = 0x02; greenData[5] = 0x01;
 8000564:	4b5c      	ldr	r3, [pc, #368]	@ (80006d8 <main+0x1e4>)
 8000566:	2203      	movs	r2, #3
 8000568:	70da      	strb	r2, [r3, #3]
 800056a:	4b5b      	ldr	r3, [pc, #364]	@ (80006d8 <main+0x1e4>)
 800056c:	2202      	movs	r2, #2
 800056e:	711a      	strb	r2, [r3, #4]
 8000570:	4b59      	ldr	r3, [pc, #356]	@ (80006d8 <main+0x1e4>)
 8000572:	2201      	movs	r2, #1
 8000574:	715a      	strb	r2, [r3, #5]
	  uint16_t crc_green = ModRTw_CRC(greenData, 6);
 8000576:	2106      	movs	r1, #6
 8000578:	4857      	ldr	r0, [pc, #348]	@ (80006d8 <main+0x1e4>)
 800057a:	f000 f8bd 	bl	80006f8 <ModRTw_CRC>
 800057e:	4603      	mov	r3, r0
 8000580:	80bb      	strh	r3, [r7, #4]
	  greenData[6] = crc_green & 0xFF;
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b54      	ldr	r3, [pc, #336]	@ (80006d8 <main+0x1e4>)
 8000588:	719a      	strb	r2, [r3, #6]
	  greenData[7] = (crc_green >> 8) & 0xFF;
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b29b      	uxth	r3, r3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b51      	ldr	r3, [pc, #324]	@ (80006d8 <main+0x1e4>)
 8000594:	71da      	strb	r2, [r3, #7]
	  /* USER CODE END 1 */

	  /* USER CODE BEGIN 2 */
	  while (1)
	  {
			HAL_UART_Receive_IT(&huart2, ackBuf, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	4950      	ldr	r1, [pc, #320]	@ (80006dc <main+0x1e8>)
 800059a:	4851      	ldr	r0, [pc, #324]	@ (80006e0 <main+0x1ec>)
 800059c:	f001 fd4d 	bl	800203a <HAL_UART_Receive_IT>

		uint32_t now = HAL_GetTick();
 80005a0:	f000 fc24 	bl	8000dec <HAL_GetTick>
 80005a4:	6038      	str	r0, [r7, #0]
		switch (current_state)
 80005a6:	4b4f      	ldr	r3, [pc, #316]	@ (80006e4 <main+0x1f0>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d8f2      	bhi.n	8000596 <main+0xa2>
 80005b0:	a201      	add	r2, pc, #4	@ (adr r2, 80005b8 <main+0xc4>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005c9 	.word	0x080005c9
 80005bc:	08000617 	.word	0x08000617
 80005c0:	08000647 	.word	0x08000647
 80005c4:	08000695 	.word	0x08000695
		{
			case 1:
				if (!waiting_for_ack)
 80005c8:	4b47      	ldr	r3, [pc, #284]	@ (80006e8 <main+0x1f4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10c      	bne.n	80005ea <main+0xf6>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d6:	4845      	ldr	r0, [pc, #276]	@ (80006ec <main+0x1f8>)
 80005d8:	f000 ff54 	bl	8001484 <HAL_GPIO_WritePin>
					current_state = 2;
 80005dc:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <main+0x1f0>)
 80005de:	2202      	movs	r2, #2
 80005e0:	701a      	strb	r2, [r3, #0]
					action_start_time = now;
 80005e2:	4a43      	ldr	r2, [pc, #268]	@ (80006f0 <main+0x1fc>)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	6013      	str	r3, [r2, #0]
						HAL_UART_Receive_IT(&huart2, ackBuf, 1);


					last_send_time = now;
				}
				break;
 80005e8:	e06c      	b.n	80006c4 <main+0x1d0>
				else if (now - last_send_time >= resend_interval)
 80005ea:	4b42      	ldr	r3, [pc, #264]	@ (80006f4 <main+0x200>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	2205      	movs	r2, #5
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d365      	bcc.n	80006c4 <main+0x1d0>
					HAL_UART_Transmit(&huart2, redData, 8, 10);
 80005f8:	230a      	movs	r3, #10
 80005fa:	2208      	movs	r2, #8
 80005fc:	4935      	ldr	r1, [pc, #212]	@ (80006d4 <main+0x1e0>)
 80005fe:	4838      	ldr	r0, [pc, #224]	@ (80006e0 <main+0x1ec>)
 8000600:	f001 fc5a 	bl	8001eb8 <HAL_UART_Transmit>
						HAL_UART_Receive_IT(&huart2, ackBuf, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	4935      	ldr	r1, [pc, #212]	@ (80006dc <main+0x1e8>)
 8000608:	4835      	ldr	r0, [pc, #212]	@ (80006e0 <main+0x1ec>)
 800060a:	f001 fd16 	bl	800203a <HAL_UART_Receive_IT>
					last_send_time = now;
 800060e:	4a39      	ldr	r2, [pc, #228]	@ (80006f4 <main+0x200>)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6013      	str	r3, [r2, #0]
				break;
 8000614:	e056      	b.n	80006c4 <main+0x1d0>

			case 2:
				if (now - action_start_time >= 10000)
 8000616:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <main+0x1fc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000622:	4293      	cmp	r3, r2
 8000624:	d950      	bls.n	80006c8 <main+0x1d4>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062c:	482f      	ldr	r0, [pc, #188]	@ (80006ec <main+0x1f8>)
 800062e:	f000 ff29 	bl	8001484 <HAL_GPIO_WritePin>
					waiting_for_ack = 1;
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <main+0x1f4>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
					current_state = 3;
 8000638:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <main+0x1f0>)
 800063a:	2203      	movs	r2, #3
 800063c:	701a      	strb	r2, [r3, #0]
					last_send_time = 0;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <main+0x200>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
				}
				break;
 8000644:	e040      	b.n	80006c8 <main+0x1d4>

			case 3:
				if (!waiting_for_ack)
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <main+0x1f4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10c      	bne.n	8000668 <main+0x174>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000654:	4825      	ldr	r0, [pc, #148]	@ (80006ec <main+0x1f8>)
 8000656:	f000 ff15 	bl	8001484 <HAL_GPIO_WritePin>
					current_state = 4;
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <main+0x1f0>)
 800065c:	2204      	movs	r2, #4
 800065e:	701a      	strb	r2, [r3, #0]
					action_start_time = now;
 8000660:	4a23      	ldr	r2, [pc, #140]	@ (80006f0 <main+0x1fc>)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	6013      	str	r3, [r2, #0]
				{
					HAL_UART_Transmit(&huart2, greenData, 8, 10);
					HAL_UART_Receive_IT(&huart2, ackBuf, 1);
					last_send_time = now;
				}
				break;
 8000666:	e031      	b.n	80006cc <main+0x1d8>
				else if (now - last_send_time >= resend_interval)
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <main+0x200>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	2205      	movs	r2, #5
 8000672:	4293      	cmp	r3, r2
 8000674:	d32a      	bcc.n	80006cc <main+0x1d8>
					HAL_UART_Transmit(&huart2, greenData, 8, 10);
 8000676:	230a      	movs	r3, #10
 8000678:	2208      	movs	r2, #8
 800067a:	4917      	ldr	r1, [pc, #92]	@ (80006d8 <main+0x1e4>)
 800067c:	4818      	ldr	r0, [pc, #96]	@ (80006e0 <main+0x1ec>)
 800067e:	f001 fc1b 	bl	8001eb8 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart2, ackBuf, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	4915      	ldr	r1, [pc, #84]	@ (80006dc <main+0x1e8>)
 8000686:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <main+0x1ec>)
 8000688:	f001 fcd7 	bl	800203a <HAL_UART_Receive_IT>
					last_send_time = now;
 800068c:	4a19      	ldr	r2, [pc, #100]	@ (80006f4 <main+0x200>)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	6013      	str	r3, [r2, #0]
				break;
 8000692:	e01b      	b.n	80006cc <main+0x1d8>

			case 4:
				if (now - action_start_time >= 6000)
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0x1fc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	f241 726f 	movw	r2, #5999	@ 0x176f
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d915      	bls.n	80006d0 <main+0x1dc>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006aa:	4810      	ldr	r0, [pc, #64]	@ (80006ec <main+0x1f8>)
 80006ac:	f000 feea 	bl	8001484 <HAL_GPIO_WritePin>
					waiting_for_ack = 1;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <main+0x1f4>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
					current_state = 1;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <main+0x1f0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
					last_send_time = 0;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <main+0x200>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
				}
				break;
 80006c2:	e005      	b.n	80006d0 <main+0x1dc>
				break;
 80006c4:	bf00      	nop
 80006c6:	e766      	b.n	8000596 <main+0xa2>
				break;
 80006c8:	bf00      	nop
 80006ca:	e764      	b.n	8000596 <main+0xa2>
				break;
 80006cc:	bf00      	nop
 80006ce:	e762      	b.n	8000596 <main+0xa2>
				break;
 80006d0:	bf00      	nop
 80006d2:	e760      	b.n	8000596 <main+0xa2>
 80006d4:	200000bc 	.word	0x200000bc
 80006d8:	200000c4 	.word	0x200000c4
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	20000002 	.word	0x20000002
 80006e8:	20000001 	.word	0x20000001
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	200000d4 	.word	0x200000d4
 80006f4:	200000d0 	.word	0x200000d0

080006f8 <ModRTw_CRC>:
	  /* USER CODE END 2 */
	}

	/* USER CODE BEGIN 4 */
	uint16_t ModRTw_CRC(uint8_t *buf, int len)
	{
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
		uint16_t crc = 0xFFFF;
 8000702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000706:	82fb      	strh	r3, [r7, #22]
		for (int pos = 0; pos < len; pos++) {
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e026      	b.n	800075c <ModRTw_CRC+0x64>
			crc ^= (uint16_t)buf[pos];
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	8afb      	ldrh	r3, [r7, #22]
 800071a:	4053      	eors	r3, r2
 800071c:	82fb      	strh	r3, [r7, #22]
			for (int i = 0; i < 8; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e015      	b.n	8000750 <ModRTw_CRC+0x58>
				if ((crc & 0x0001) != 0) {
 8000724:	8afb      	ldrh	r3, [r7, #22]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <ModRTw_CRC+0x4c>
					crc >>= 1;
 800072e:	8afb      	ldrh	r3, [r7, #22]
 8000730:	085b      	lsrs	r3, r3, #1
 8000732:	82fb      	strh	r3, [r7, #22]
					crc ^= 0xA001;
 8000734:	8afb      	ldrh	r3, [r7, #22]
 8000736:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800073a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800073e:	43db      	mvns	r3, r3
 8000740:	82fb      	strh	r3, [r7, #22]
 8000742:	e002      	b.n	800074a <ModRTw_CRC+0x52>
				} else {
					crc >>= 1;
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	82fb      	strh	r3, [r7, #22]
			for (int i = 0; i < 8; i++) {
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2b07      	cmp	r3, #7
 8000754:	dde6      	ble.n	8000724 <ModRTw_CRC+0x2c>
		for (int pos = 0; pos < len; pos++) {
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3301      	adds	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	dbd4      	blt.n	800070e <ModRTw_CRC+0x16>
				}
			}
		}
		return crc;
 8000764:	8afb      	ldrh	r3, [r7, #22]
	}
 8000766:	4618      	mov	r0, r3
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <HAL_UART_RxCpltCallback>:

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a22      	ldr	r2, [pc, #136]	@ (800080c <HAL_UART_RxCpltCallback+0x98>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d13e      	bne.n	8000804 <HAL_UART_RxCpltCallback+0x90>
		{
	if(ACK==ackBuf[0]){
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <HAL_UART_RxCpltCallback+0x9c>)
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <HAL_UART_RxCpltCallback+0xa0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d102      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x24>
			waiting_for_ack = 0;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <HAL_UART_RxCpltCallback+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	}


	if(ackBuf[0]==0x00){
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <HAL_UART_RxCpltCallback+0x9c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d116      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a6:	481d      	ldr	r0, [pc, #116]	@ (800081c <HAL_UART_RxCpltCallback+0xa8>)
 80007a8:	f000 fe6c 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <HAL_UART_RxCpltCallback+0xa8>)
 80007b4:	f000 fe66 	bl	8001484 <HAL_GPIO_WritePin>
		waiting_for_ack=0;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_UART_RxCpltCallback+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
		current_state=1;
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_UART_RxCpltCallback+0xac>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, redData,8);
 80007c4:	2208      	movs	r2, #8
 80007c6:	4917      	ldr	r1, [pc, #92]	@ (8000824 <HAL_UART_RxCpltCallback+0xb0>)
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <HAL_UART_RxCpltCallback+0xb4>)
 80007ca:	f001 fc00 	bl	8001fce <HAL_UART_Transmit_IT>
	}
	if(ackBuf[0]==0x01)
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0x9c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d116      	bne.n	8000804 <HAL_UART_RxCpltCallback+0x90>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007dc:	480f      	ldr	r0, [pc, #60]	@ (800081c <HAL_UART_RxCpltCallback+0xa8>)
 80007de:	f000 fe51 	bl	8001484 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_UART_RxCpltCallback+0xa8>)
 80007ea:	f000 fe4b 	bl	8001484 <HAL_GPIO_WritePin>
		waiting_for_ack=0;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_UART_RxCpltCallback+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		current_state=3;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_UART_RxCpltCallback+0xac>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, greenData, 8);
 80007fa:	2208      	movs	r2, #8
 80007fc:	490b      	ldr	r1, [pc, #44]	@ (800082c <HAL_UART_RxCpltCallback+0xb8>)
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <HAL_UART_RxCpltCallback+0xb4>)
 8000800:	f001 fbe5 	bl	8001fce <HAL_UART_Transmit_IT>
	}
		}

	}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	200000cc 	.word	0x200000cc
 8000814:	20000000 	.word	0x20000000
 8000818:	20000001 	.word	0x20000001
 800081c:	40020c00 	.word	0x40020c00
 8000820:	20000002 	.word	0x20000002
 8000824:	200000bc 	.word	0x200000bc
 8000828:	2000002c 	.word	0x2000002c
 800082c:	200000c4 	.word	0x200000c4

08000830 <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	  if (GPIO_Pin == GPIO_PIN_0)
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10e      	bne.n	800085e <HAL_GPIO_EXTI_Callback+0x2e>
	  {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x38>)
 8000848:	f000 fe1c 	bl	8001484 <HAL_GPIO_WritePin>
		current_state = 1;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <HAL_GPIO_EXTI_Callback+0x3c>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
		waiting_for_ack = 1;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x40>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
		last_send_time = 0;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	  }
	}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020c00 	.word	0x40020c00
 800086c:	20000002 	.word	0x20000002
 8000870:	20000001 	.word	0x20000001
 8000874:	200000d0 	.word	0x200000d0

08000878 <SystemClock_Config>:

	void SystemClock_Config(void)
	{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	@ 0x50
 800087c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	@ 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fb68 	bl	8002f5c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <SystemClock_Config+0xc8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a26      	ldr	r2, [pc, #152]	@ (8000940 <SystemClock_Config+0xc8>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <SystemClock_Config+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <SystemClock_Config+0xcc>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLN = 50;
 80008ec:	2332      	movs	r3, #50	@ 0x32
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fdf3 	bl	80014e8 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
 8000908:	f000 f8c8 	bl	8000a9c <Error_Handler>

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
									RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) Error_Handler();
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f855 	bl	80019d8 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc0>
 8000934:	f000 f8b2 	bl	8000a9c <Error_Handler>
	}
 8000938:	bf00      	nop
 800093a:	3750      	adds	r7, #80	@ 0x50
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_GPIO_Init>:

	static void MX_GPIO_Init(void)
	{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a24      	ldr	r2, [pc, #144]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a1d      	ldr	r2, [pc, #116]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0xa0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

	  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_14;
 8000996:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800099a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <MX_GPIO_Init+0xa4>)
 80009b0:	f000 fbcc 	bl	800114c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b4:	2301      	movs	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009bc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <MX_GPIO_Init+0xa8>)
 80009ca:	f000 fbbf 	bl	800114c <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2006      	movs	r0, #6
 80009d4:	f000 faf1 	bl	8000fba <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d8:	2006      	movs	r0, #6
 80009da:	f000 fb0a 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
	}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000

080009f4 <MX_USART2_UART_Init>:

	static void MX_USART2_UART_Init(void)
	{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f001 f9f4 	bl	8001e18 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
 8000a36:	f000 f831 	bl	8000a9c <Error_Handler>
	}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000002c 	.word	0x2000002c
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_USART3_UART_Init>:

	static void MX_USART3_UART_Init(void)
	{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	  huart3.Instance = USART3;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART3_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK) Error_Handler();
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART3_UART_Init+0x4c>)
 8000a80:	f001 f9ca 	bl	8001e18 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x46>
 8000a8a:	f000 f807 	bl	8000a9c <Error_Handler>
	}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000074 	.word	0x20000074
 8000a98:	40004800 	.word	0x40004800

08000a9c <Error_Handler>:

	void Error_Handler(void)
	{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
	  __disable_irq();
	  while (1) {}
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a3a      	ldr	r2, [pc, #232]	@ (8000c00 <HAL_UART_MspInit+0x108>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d134      	bne.n	8000b84 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a38      	ldr	r2, [pc, #224]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b36      	ldr	r3, [pc, #216]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a31      	ldr	r2, [pc, #196]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b52:	230c      	movs	r3, #12
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b62:	2307      	movs	r3, #7
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <HAL_UART_MspInit+0x110>)
 8000b6e:	f000 faed 	bl	800114c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2026      	movs	r0, #38	@ 0x26
 8000b78:	f000 fa1f 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7c:	2026      	movs	r0, #38	@ 0x26
 8000b7e:	f000 fa38 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b82:	e039      	b.n	8000bf8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_UART_MspInit+0x114>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d134      	bne.n	8000bf8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <HAL_UART_MspInit+0x118>)
 8000be4:	f000 fab2 	bl	800114c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2027      	movs	r0, #39	@ 0x27
 8000bee:	f000 f9e4 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bf2:	2027      	movs	r0, #39	@ 0x27
 8000bf4:	f000 f9fd 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	@ 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	40020400 	.word	0x40020400

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f8ab 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 fc1e 	bl	80014b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <USART2_IRQHandler+0x10>)
 8000c86:	f001 f9fd 	bl	8002084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000002c 	.word	0x2000002c

08000c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART3_IRQHandler+0x10>)
 8000c9a:	f001 f9f3 	bl	8002084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000074 	.word	0x20000074

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f002 f937 	bl	8002f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fbf9 	bl	80004f4 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d10:	08002ff4 	.word	0x08002ff4
  ldr r2, =_sbss
 8000d14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d18:	200000dc 	.word	0x200000dc

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f92b 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fea8 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f943 	bl	800100e <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f90b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	200000d8 	.word	0x200000d8

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200000d8 	.word	0x200000d8

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff feda 	bl	8000dec <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d008      	beq.n	8001058 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2280      	movs	r2, #128	@ 0x80
 800104a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e052      	b.n	80010fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0216 	bic.w	r2, r2, #22
 8001066:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001076:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	2b00      	cmp	r3, #0
 800107e:	d103      	bne.n	8001088 <HAL_DMA_Abort+0x62>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0208 	bic.w	r2, r2, #8
 8001096:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a8:	e013      	b.n	80010d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010aa:	f7ff fe9f 	bl	8000dec <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d90c      	bls.n	80010d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2220      	movs	r2, #32
 80010bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e015      	b.n	80010fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e4      	bne.n	80010aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e4:	223f      	movs	r2, #63	@ 0x3f
 80010e6:	409a      	lsls	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d004      	beq.n	8001124 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e00c      	b.n	800113e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2205      	movs	r2, #5
 8001128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e16b      	b.n	8001440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 815a 	bne.w	800143a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80b4 	beq.w	800143a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b60      	ldr	r3, [pc, #384]	@ (8001458 <HAL_GPIO_Init+0x30c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a5f      	ldr	r2, [pc, #380]	@ (8001458 <HAL_GPIO_Init+0x30c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001458 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a5b      	ldr	r2, [pc, #364]	@ (800145c <HAL_GPIO_Init+0x310>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a52      	ldr	r2, [pc, #328]	@ (8001460 <HAL_GPIO_Init+0x314>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a51      	ldr	r2, [pc, #324]	@ (8001464 <HAL_GPIO_Init+0x318>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x222>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a50      	ldr	r2, [pc, #320]	@ (8001468 <HAL_GPIO_Init+0x31c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4f      	ldr	r2, [pc, #316]	@ (800146c <HAL_GPIO_Init+0x320>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	@ (8001470 <HAL_GPIO_Init+0x324>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x216>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <HAL_GPIO_Init+0x328>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x212>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	@ (8001478 <HAL_GPIO_Init+0x32c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	@ (800147c <HAL_GPIO_Init+0x330>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x20a>
 8001352:	2307      	movs	r3, #7
 8001354:	e00e      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001356:	2308      	movs	r3, #8
 8001358:	e00c      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800135a:	2306      	movs	r3, #6
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800135e:	2305      	movs	r3, #5
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	@ (800145c <HAL_GPIO_Init+0x310>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_GPIO_Init+0x334>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_GPIO_Init+0x334>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_GPIO_Init+0x334>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <HAL_GPIO_Init+0x334>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_GPIO_Init+0x334>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_GPIO_Init+0x334>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_GPIO_Init+0x334>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <HAL_GPIO_Init+0x334>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f ae90 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40021400 	.word	0x40021400
 8001478:	40021800 	.word	0x40021800
 800147c:	40021c00 	.word	0x40021c00
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f9aa 	bl	8000830 <HAL_GPIO_EXTI_Callback>
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e267      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d075      	beq.n	80015f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001506:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b04      	cmp	r3, #4
 8001510:	d00c      	beq.n	800152c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001512:	4b85      	ldr	r3, [pc, #532]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800151a:	2b08      	cmp	r3, #8
 800151c:	d112      	bne.n	8001544 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151e:	4b82      	ldr	r3, [pc, #520]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800152a:	d10b      	bne.n	8001544 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	4b7e      	ldr	r3, [pc, #504]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d05b      	beq.n	80015f0 <HAL_RCC_OscConfig+0x108>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d157      	bne.n	80015f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e242      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x74>
 800154e:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a75      	ldr	r2, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e01d      	b.n	8001598 <HAL_RCC_OscConfig+0xb0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x98>
 8001566:	4b70      	ldr	r3, [pc, #448]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6f      	ldr	r2, [pc, #444]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b6d      	ldr	r3, [pc, #436]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6c      	ldr	r2, [pc, #432]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0xb0>
 8001580:	4b69      	ldr	r3, [pc, #420]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a68      	ldr	r2, [pc, #416]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b66      	ldr	r3, [pc, #408]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a65      	ldr	r2, [pc, #404]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc24 	bl	8000dec <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fc20 	bl	8000dec <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e207      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fc10 	bl	8000dec <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fc0c 	bl	8000dec <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	@ 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1f3      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	4b51      	ldr	r3, [pc, #324]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0xe8>
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d063      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001612:	2b08      	cmp	r3, #8
 8001614:	d11c      	bne.n	8001650 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d116      	bne.n	8001650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x152>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e1c7      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4937      	ldr	r1, [pc, #220]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	e03a      	b.n	80016c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x244>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff fbc5 	bl	8000dec <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001666:	f7ff fbc1 	bl	8000dec <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1a8      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4925      	ldr	r1, [pc, #148]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x244>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fba4 	bl	8000dec <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fba0 	bl	8000dec <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e187      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d036      	beq.n	8001740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d016      	beq.n	8001708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_RCC_OscConfig+0x248>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fb84 	bl	8000dec <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff fb80 	bl	8000dec <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e167      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_RCC_OscConfig+0x240>)
 80016fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x200>
 8001706:	e01b      	b.n	8001740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_OscConfig+0x248>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff fb6d 	bl	8000dec <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	e00e      	b.n	8001734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fb69 	bl	8000dec <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d907      	bls.n	8001734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e150      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
 8001728:	40023800 	.word	0x40023800
 800172c:	42470000 	.word	0x42470000
 8001730:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ea      	bne.n	8001716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8097 	beq.w	800187c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b81      	ldr	r3, [pc, #516]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b7d      	ldr	r3, [pc, #500]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a7c      	ldr	r2, [pc, #496]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b77      	ldr	r3, [pc, #476]	@ (800195c <HAL_RCC_OscConfig+0x474>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b74      	ldr	r3, [pc, #464]	@ (800195c <HAL_RCC_OscConfig+0x474>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a73      	ldr	r2, [pc, #460]	@ (800195c <HAL_RCC_OscConfig+0x474>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb29 	bl	8000dec <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff fb25 	bl	8000dec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e10c      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_RCC_OscConfig+0x474>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2ea>
 80017c4:	4b64      	ldr	r3, [pc, #400]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a63      	ldr	r2, [pc, #396]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d0:	e01c      	b.n	800180c <HAL_RCC_OscConfig+0x324>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x30c>
 80017da:	4b5f      	ldr	r3, [pc, #380]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	4a5e      	ldr	r2, [pc, #376]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0x324>
 80017f4:	4b58      	ldr	r3, [pc, #352]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f8:	4a57      	ldr	r2, [pc, #348]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001800:	4b55      	ldr	r3, [pc, #340]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001804:	4a54      	ldr	r2, [pc, #336]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001806:	f023 0304 	bic.w	r3, r3, #4
 800180a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d015      	beq.n	8001840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff faea 	bl	8000dec <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff fae6 	bl	8000dec <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0cb      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ee      	beq.n	800181c <HAL_RCC_OscConfig+0x334>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff fad4 	bl	8000dec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff fad0 	bl	8000dec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0b5      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ee      	bne.n	8001848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001870:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	4a38      	ldr	r2, [pc, #224]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a1 	beq.w	80019c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001886:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d05c      	beq.n	800194c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d141      	bne.n	800191e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_RCC_OscConfig+0x478>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff faa4 	bl	8000dec <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff faa0 	bl	8000dec <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e087      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	4b27      	ldr	r3, [pc, #156]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	019b      	lsls	r3, r3, #6
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	491b      	ldr	r1, [pc, #108]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x478>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fa79 	bl	8000dec <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fa75 	bl	8000dec <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e05c      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x416>
 800191c:	e054      	b.n	80019c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_RCC_OscConfig+0x478>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fa62 	bl	8000dec <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fa5e 	bl	8000dec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e045      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_RCC_OscConfig+0x470>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x444>
 800194a:	e03d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e038      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000
 8001960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_RCC_OscConfig+0x4ec>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d028      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d121      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d11a      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800199a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800199c:	4293      	cmp	r3, r2
 800199e:	d111      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	3b01      	subs	r3, #1
 80019ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0cc      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b68      	ldr	r3, [pc, #416]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d90c      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b65      	ldr	r3, [pc, #404]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0b8      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a2c:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a58      	ldr	r2, [pc, #352]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b50      	ldr	r3, [pc, #320]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	494d      	ldr	r1, [pc, #308]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d044      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b47      	ldr	r3, [pc, #284]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d119      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e07f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	4b3f      	ldr	r3, [pc, #252]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e067      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4934      	ldr	r1, [pc, #208]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f990 	bl	8000dec <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7ff f98c 	bl	8000dec <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e04f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d20c      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e032      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4916      	ldr	r1, [pc, #88]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	490e      	ldr	r1, [pc, #56]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b5e:	f000 f821 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	490a      	ldr	r1, [pc, #40]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	5ccb      	ldrb	r3, [r1, r3]
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8f0 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08002fcc 	.word	0x08002fcc
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	b094      	sub	sp, #80	@ 0x50
 8001baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bbc:	4b79      	ldr	r3, [pc, #484]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d00d      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	f200 80e1 	bhi.w	8001d90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd6:	e0db      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b73      	ldr	r3, [pc, #460]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bdc:	e0db      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x208>)
 8001be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be2:	e0d8      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be4:	4b6f      	ldr	r3, [pc, #444]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bee:	4b6d      	ldr	r3, [pc, #436]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	2200      	movs	r2, #0
 8001c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c16:	4622      	mov	r2, r4
 8001c18:	462b      	mov	r3, r5
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	0159      	lsls	r1, r3, #5
 8001c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4621      	mov	r1, r4
 8001c30:	1a51      	subs	r1, r2, r1
 8001c32:	6139      	str	r1, [r7, #16]
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c48:	4659      	mov	r1, fp
 8001c4a:	018b      	lsls	r3, r1, #6
 8001c4c:	4651      	mov	r1, sl
 8001c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c52:	4651      	mov	r1, sl
 8001c54:	018a      	lsls	r2, r1, #6
 8001c56:	4651      	mov	r1, sl
 8001c58:	ebb2 0801 	subs.w	r8, r2, r1
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c76:	4690      	mov	r8, r2
 8001c78:	4699      	mov	r9, r3
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	eb18 0303 	adds.w	r3, r8, r3
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	462b      	mov	r3, r5
 8001c84:	eb49 0303 	adc.w	r3, r9, r3
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c96:	4629      	mov	r1, r5
 8001c98:	024b      	lsls	r3, r1, #9
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	024a      	lsls	r2, r1, #9
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cb4:	f7fe fa88 	bl	80001c8 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc0:	e058      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4611      	mov	r1, r2
 8001cce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cdc:	4642      	mov	r2, r8
 8001cde:	464b      	mov	r3, r9
 8001ce0:	f04f 0000 	mov.w	r0, #0
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	0159      	lsls	r1, r3, #5
 8001cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cee:	0150      	lsls	r0, r2, #5
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4641      	mov	r1, r8
 8001cf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d14:	ebb2 040a 	subs.w	r4, r2, sl
 8001d18:	eb63 050b 	sbc.w	r5, r3, fp
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	00eb      	lsls	r3, r5, #3
 8001d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2a:	00e2      	lsls	r2, r4, #3
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	4643      	mov	r3, r8
 8001d32:	18e3      	adds	r3, r4, r3
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	464b      	mov	r3, r9
 8001d38:	eb45 0303 	adc.w	r3, r5, r3
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	028b      	lsls	r3, r1, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d54:	4621      	mov	r1, r4
 8001d56:	028a      	lsls	r2, r1, #10
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	61fa      	str	r2, [r7, #28]
 8001d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d68:	f7fe fa2e 	bl	80001c8 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3750      	adds	r7, #80	@ 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0a9b      	lsrs	r3, r3, #10
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08002fdc 	.word	0x08002fdc

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffdc 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0b5b      	lsrs	r3, r3, #13
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08002fdc 	.word	0x08002fdc

08001e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e042      	b.n	8001eb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fe5a 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	@ 0x24
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fe09 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d175      	bne.n	8001fc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_UART_Transmit+0x2c>
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e06e      	b.n	8001fc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2221      	movs	r2, #33	@ 0x21
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ef6:	f7fe ff79 	bl	8000dec <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f10:	d108      	bne.n	8001f24 <HAL_UART_Transmit+0x6c>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d104      	bne.n	8001f24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	e003      	b.n	8001f2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f2c:	e02e      	b.n	8001f8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fb6d 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e03a      	b.n	8001fc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10b      	bne.n	8001f6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e007      	b.n	8001f7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1cb      	bne.n	8001f2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2140      	movs	r1, #64	@ 0x40
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fb39 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d121      	bne.n	800202c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_UART_Transmit_IT+0x26>
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e01a      	b.n	800202e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	@ 0x21
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002026:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e000      	b.n	800202e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b20      	cmp	r3, #32
 8002052:	d112      	bne.n	800207a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_Receive_IT+0x26>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e00b      	b.n	800207c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	461a      	mov	r2, r3
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fb2a 	bl	80026ca <UART_Start_Receive_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	e000      	b.n	800207c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ba      	sub	sp, #232	@ 0xe8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_UART_IRQHandler+0x66>
 80020d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fc07 	bl	80028f6 <UART_Receive_IT>
      return;
 80020e8:	e273      	b.n	80025d2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80de 	beq.w	80022b0 <HAL_UART_IRQHandler+0x22c>
 80020f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002104:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80d1 	beq.w	80022b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800210e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_UART_IRQHandler+0xae>
 800211a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_UART_IRQHandler+0xd2>
 800213e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_UART_IRQHandler+0xf6>
 8002162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800217a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d011      	beq.n	80021aa <HAL_UART_IRQHandler+0x126>
 8002186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f043 0208 	orr.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 820a 	beq.w	80025c8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_UART_IRQHandler+0x14e>
 80021c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fb92 	bl	80028f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021dc:	2b40      	cmp	r3, #64	@ 0x40
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_UART_IRQHandler+0x17a>
 80021f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04f      	beq.n	800229e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa9d 	bl	800273e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b40      	cmp	r3, #64	@ 0x40
 8002210:	d141      	bne.n	8002296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3314      	adds	r3, #20
 8002218:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800222c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3314      	adds	r3, #20
 800223a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800223e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800224a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800224e:	e841 2300 	strex	r3, r2, [r1]
 8002252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1d9      	bne.n	8002212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226a:	4a8a      	ldr	r2, [pc, #552]	@ (8002494 <HAL_UART_IRQHandler+0x410>)
 800226c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe ff47 	bl	8001106 <HAL_DMA_Abort_IT>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002288:	4610      	mov	r0, r2
 800228a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228c:	e00e      	b.n	80022ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9ac 	bl	80025ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	e00a      	b.n	80022ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9a8 	bl	80025ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e006      	b.n	80022ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f9a4 	bl	80025ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80022aa:	e18d      	b.n	80025c8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	bf00      	nop
    return;
 80022ae:	e18b      	b.n	80025c8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f040 8167 	bne.w	8002588 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8160 	beq.w	8002588 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80022c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8159 	beq.w	8002588 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f6:	2b40      	cmp	r3, #64	@ 0x40
 80022f8:	f040 80ce 	bne.w	8002498 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a9 	beq.w	8002464 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800231a:	429a      	cmp	r2, r3
 800231c:	f080 80a2 	bcs.w	8002464 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002326:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002332:	f000 8088 	beq.w	8002446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800234c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002362:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800236e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1d9      	bne.n	8002336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3314      	adds	r3, #20
 8002388:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800238c:	e853 3f00 	ldrex	r3, [r3]
 8002390:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3314      	adds	r3, #20
 80023a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80023aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e1      	bne.n	8002382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3314      	adds	r3, #20
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c8:	e853 3f00 	ldrex	r3, [r3]
 80023cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3314      	adds	r3, #20
 80023de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e3      	bne.n	80023be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800240e:	e853 3f00 	ldrex	r3, [r3]
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002416:	f023 0310 	bic.w	r3, r3, #16
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	330c      	adds	r3, #12
 8002424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002428:	65ba      	str	r2, [r7, #88]	@ 0x58
 800242a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800242e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002430:	e841 2300 	strex	r3, r2, [r1]
 8002434:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e3      	bne.n	8002404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fdf0 	bl	8001026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002454:	b29b      	uxth	r3, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	b29b      	uxth	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8cf 	bl	8002600 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002462:	e0b3      	b.n	80025cc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 80ad 	bne.w	80025cc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247c:	f040 80a6 	bne.w	80025cc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8b7 	bl	8002600 <HAL_UARTEx_RxEventCallback>
      return;
 8002492:	e09b      	b.n	80025cc <HAL_UART_IRQHandler+0x548>
 8002494:	08002805 	.word	0x08002805
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 808e 	beq.w	80025d0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80024b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8089 	beq.w	80025d0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e3      	bne.n	80024be <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	623b      	str	r3, [r7, #32]
   return(result);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3314      	adds	r3, #20
 8002516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800251a:	633a      	str	r2, [r7, #48]	@ 0x30
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002522:	e841 2300 	strex	r3, r2, [r1]
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e3      	bne.n	80024f6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	60fb      	str	r3, [r7, #12]
   return(result);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0310 	bic.w	r3, r3, #16
 8002552:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002560:	61fa      	str	r2, [r7, #28]
 8002562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	69b9      	ldr	r1, [r7, #24]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	617b      	str	r3, [r7, #20]
   return(result);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e3      	bne.n	800253c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800257a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f83d 	bl	8002600 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002586:	e023      	b.n	80025d0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_UART_IRQHandler+0x524>
 8002594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f940 	bl	8002826 <UART_Transmit_IT>
    return;
 80025a6:	e014      	b.n	80025d2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <HAL_UART_IRQHandler+0x54e>
 80025b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f980 	bl	80028c6 <UART_EndTransmit_IT>
    return;
 80025c6:	e004      	b.n	80025d2 <HAL_UART_IRQHandler+0x54e>
    return;
 80025c8:	bf00      	nop
 80025ca:	e002      	b.n	80025d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80025d0:	bf00      	nop
  }
}
 80025d2:	37e8      	adds	r7, #232	@ 0xe8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002628:	e03b      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d037      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe fbdb 	bl	8000dec <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <UART_WaitOnFlagUntilTimeout+0x30>
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e03a      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d023      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b80      	cmp	r3, #128	@ 0x80
 800265e:	d020      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d01d      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d116      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f857 	bl	800273e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2208      	movs	r2, #8
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d0b4      	beq.n	800262a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	4613      	mov	r3, r2
 80026d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2222      	movs	r2, #34	@ 0x22
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800273e:	b480      	push	{r7}
 8002740:	b095      	sub	sp, #84	@ 0x54
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800275c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002766:	643a      	str	r2, [r7, #64]	@ 0x40
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800276c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	61fb      	str	r3, [r7, #28]
   return(result);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800279a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e5      	bne.n	800277a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d119      	bne.n	80027ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f023 0310 	bic.w	r3, r3, #16
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027d6:	61ba      	str	r2, [r7, #24]
 80027d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	6979      	ldr	r1, [r7, #20]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	613b      	str	r3, [r7, #16]
   return(result);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027f8:	bf00      	nop
 80027fa:	3754      	adds	r7, #84	@ 0x54
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fee7 	bl	80025ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b21      	cmp	r3, #33	@ 0x21
 8002838:	d13e      	bne.n	80028b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002842:	d114      	bne.n	800286e <UART_Transmit_IT+0x48>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d110      	bne.n	800286e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1c9a      	adds	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]
 800286c:	e008      	b.n	8002880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6211      	str	r1, [r2, #32]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4619      	mov	r1, r3
 800288e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fe76 	bl	80025d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08c      	sub	sp, #48	@ 0x30
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b22      	cmp	r3, #34	@ 0x22
 8002910:	f040 80aa 	bne.w	8002a68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800291c:	d115      	bne.n	800294a <UART_Receive_IT+0x54>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d111      	bne.n	800294a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002938:	b29a      	uxth	r2, r3
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
 8002948:	e024      	b.n	8002994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002958:	d007      	beq.n	800296a <UART_Receive_IT+0x74>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <UART_Receive_IT+0x82>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e008      	b.n	800298a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002984:	b2da      	uxtb	r2, r3
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d15d      	bne.n	8002a64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0220 	bic.w	r2, r2, #32
 80029b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d135      	bne.n	8002a5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	613b      	str	r3, [r7, #16]
   return(result);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 0310 	bic.w	r3, r3, #16
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	623a      	str	r2, [r7, #32]
 8002a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	69f9      	ldr	r1, [r7, #28]
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e5      	bne.n	80029f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d10a      	bne.n	8002a4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fdd4 	bl	8002600 <HAL_UARTEx_RxEventCallback>
 8002a58:	e002      	b.n	8002a60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd fe8a 	bl	8000774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e002      	b.n	8002a6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3730      	adds	r7, #48	@ 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b0c0      	sub	sp, #256	@ 0x100
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	ea40 0301 	orr.w	r3, r0, r1
 8002a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002acc:	f021 010c 	bic.w	r1, r1, #12
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aee:	6999      	ldr	r1, [r3, #24]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	ea40 0301 	orr.w	r3, r0, r1
 8002afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8f      	ldr	r3, [pc, #572]	@ (8002d40 <UART_SetConfig+0x2cc>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0xa0>
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d44 <UART_SetConfig+0x2d0>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f96c 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002b18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b1c:	e003      	b.n	8002b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1e:	f7ff f953 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8002b22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b30:	f040 810c 	bne.w	8002d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b56:	4621      	mov	r1, r4
 8002b58:	eb12 0801 	adds.w	r8, r2, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb43 0901 	adc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bb8:	f7fd fb06 	bl	80001c8 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b61      	ldr	r3, [pc, #388]	@ (8002d48 <UART_SetConfig+0x2d4>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011c      	lsls	r4, r3, #4
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002be4:	415b      	adcs	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bec:	4641      	mov	r1, r8
 8002bee:	eb12 0a01 	adds.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	469b      	mov	fp, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	eb1a 0303 	adds.w	r3, sl, r3
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c4e:	f7fd fabb 	bl	80001c8 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	4b3b      	ldr	r3, [pc, #236]	@ (8002d48 <UART_SetConfig+0x2d4>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2264      	movs	r2, #100	@ 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	1acb      	subs	r3, r1, r3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c6e:	4b36      	ldr	r3, [pc, #216]	@ (8002d48 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 2302 	umull	r2, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c7c:	441c      	add	r4, r3
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d0a:	f7fd fa5d 	bl	80001c8 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <UART_SetConfig+0x2d4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	@ 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	@ 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <UART_SetConfig+0x2d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d3c:	e106      	b.n	8002f4c <UART_SetConfig+0x4d8>
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	6239      	str	r1, [r7, #32]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1854      	adds	r4, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb43 0501 	adc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d94:	464b      	mov	r3, r9
 8002d96:	eb45 0303 	adc.w	r3, r5, r3
 8002d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dba:	4629      	mov	r1, r5
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	008a      	lsls	r2, r1, #2
 8002dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dcc:	f7fd f9fc 	bl	80001c8 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011c      	lsls	r4, r3, #4
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	61b9      	str	r1, [r7, #24]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6139      	str	r1, [r7, #16]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e34:	464b      	mov	r3, r9
 8002e36:	460a      	mov	r2, r1
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e58:	4649      	mov	r1, r9
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e62:	4641      	mov	r1, r8
 8002e64:	008a      	lsls	r2, r1, #2
 8002e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e6a:	f7fd f9ad 	bl	80001c8 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b38      	ldr	r3, [pc, #224]	@ (8002f58 <UART_SetConfig+0x4e4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	@ 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	@ 0x32
 8002e88:	4a33      	ldr	r2, [pc, #204]	@ (8002f58 <UART_SetConfig+0x4e4>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e94:	441c      	add	r4, r3
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	1891      	adds	r1, r2, r2
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	415b      	adcs	r3, r3
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	1851      	adds	r1, r2, r1
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	4649      	mov	r1, r9
 8002ebc:	414b      	adcs	r3, r1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	00cb      	lsls	r3, r1, #3
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	00ca      	lsls	r2, r1, #3
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	460a      	mov	r2, r1
 8002eea:	eb42 0303 	adc.w	r3, r2, r3
 8002eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002efa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f08:	4649      	mov	r1, r9
 8002f0a:	008b      	lsls	r3, r1, #2
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f12:	4641      	mov	r1, r8
 8002f14:	008a      	lsls	r2, r1, #2
 8002f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f1a:	f7fd f955 	bl	80001c8 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <UART_SetConfig+0x4e4>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	@ 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	3332      	adds	r3, #50	@ 0x32
 8002f36:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <UART_SetConfig+0x4e4>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4422      	add	r2, r4
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <memset>:
 8002f5c:	4402      	add	r2, r0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa4 <__libc_init_array+0x38>)
 8002f70:	4c0d      	ldr	r4, [pc, #52]	@ (8002fa8 <__libc_init_array+0x3c>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	2600      	movs	r6, #0
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002fac <__libc_init_array+0x40>)
 8002f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb0 <__libc_init_array+0x44>)
 8002f80:	f000 f818 	bl	8002fb4 <_init>
 8002f84:	1b64      	subs	r4, r4, r5
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	2600      	movs	r6, #0
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	08002fec 	.word	0x08002fec
 8002fa8:	08002fec 	.word	0x08002fec
 8002fac:	08002fec 	.word	0x08002fec
 8002fb0:	08002ff0 	.word	0x08002ff0

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
